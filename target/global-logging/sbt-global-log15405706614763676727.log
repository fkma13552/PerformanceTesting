[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ozonp\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ozonp\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.7 (Oracle Corporation Java 17.0.1)
[debug]       Load.loadUnit: plugins took 311.9992ms
[debug]       Load.loadUnit: defsScala took 0.4998ms
[debug] [Loading] Scanning directory C:\Users\ozonp\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ozonp\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 40.1632 ms
[debug]           Load.resolveProject(global-plugins) took 140.9775ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ozonp\.sbt\1.0\plugins, plugins: List(<none>))) took 219.7999ms
[debug] [Loading] Done in C:\Users\ozonp\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 339.0784ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4857ms
[debug]     Load.loadUnit(file:/C:/Users/ozonp/.sbt/1.0/plugins/, ...) took 673.0606ms
[debug]   Load.apply: load took 1470.1819ms
[debug]   Load.apply: resolveProjects took 66.6354ms
[debug]   Load.apply: finalTransforms took 339.7238ms
[debug]   Load.apply: config.delegates took 69.6668ms
[debug]   Load.apply: Def.make(settings)... took 975.4193ms
[debug]   Load.apply: structureIndex took 188.3455ms
[debug]   Load.apply: mkStreams took 2.5739ms
[info] loading global plugins from C:\Users\ozonp\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 11010.3657ms
[debug]           Load.loadUnit: plugins took 61.1257ms
[debug]           Load.loadUnit: defsScala took 0.0053ms
[debug] [Loading] Scanning directory D:\kpi\performance-testing-main\project
[debug]             Load.loadUnit: mkEval took 9.4205ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\kpi\performance-testing-main\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3816 ms
[info] loading settings for project performance-testing-main-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(performance-testing-main-build) took 5.326ms
[debug]             Load.loadTransitive: finalizeProject(Project(id performance-testing-main-build, base: D:\kpi\performance-testing-main\project, plugins: List(<none>))) took 8.5313ms
[debug] [Loading] Done in D:\kpi\performance-testing-main\project, returning: (performance-testing-main-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4804.071ms
[debug]           Load.loadUnit: cleanEvalClasses took 26.4575ms
[debug]         Load.loadUnit(file:/D:/kpi/performance-testing-main/project/, ...) took 4893.2891ms
[debug]       Load.apply: load took 4895.6629ms
[debug]       Load.apply: resolveProjects took 0.1672ms
[debug]       Load.apply: finalTransforms took 15.5088ms
[debug]       Load.apply: config.delegates took 0.5646ms
[debug]       Load.apply: Def.make(settings)... took 167.8846ms
[debug]       Load.apply: structureIndex took 79.6573ms
[debug]       Load.apply: mkStreams took 0.0033ms
[info] loading project definition from D:\kpi\performance-testing-main\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 7169.1746ms
[debug]     Load.loadUnit: defsScala took 0.0105ms
[debug] [Loading] Scanning directory D:\kpi\performance-testing-main
[debug]       Load.loadUnit: mkEval took 0.5776ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\kpi\performance-testing-main, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(io.gatling.sbt.GatlingPlugin), Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(io.gatling.sbt.GatlingPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,io.gatling.sbt.GatlingPlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 7.3649 ms
[info] loading settings for project performance-testing-main from build.sbt ...
[debug]         Load.resolveProject(performance-testing-main) took 131.0406ms
[debug]       Load.loadTransitive: finalizeProject(Project(id performance-testing-main, base: D:\kpi\performance-testing-main, plugins: List(<none>))) took 143.957ms
[debug] [Loading] Done in D:\kpi\performance-testing-main, returning: (performance-testing-main)
[debug]     Load.loadUnit: loadedProjectsRaw took 2978.6397ms
[debug]     Load.loadUnit: cleanEvalClasses took 102.5851ms
[debug]   Load.loadUnit(file:/D:/kpi/performance-testing-main/, ...) took 10252.1989ms
[debug] Load.apply: load took 10255.8299ms
[debug] Load.apply: resolveProjects took 0.2441ms
[debug] Load.apply: finalTransforms took 84.6869ms
[debug] Load.apply: config.delegates took 1.0804ms
[debug] Load.apply: Def.make(settings)... took 737.8328ms
[debug] Load.apply: structureIndex took 67.4989ms
[debug] Load.apply: mkStreams took 0.4582ms
[info] set current project to pt (in build file:/D:/kpi/performance-testing-main/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 65370 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 65370, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to pt (in build file:/D:/kpi/performance-testing-main/)
[debug] > Exec(idea-shell, None, None)
